{"version":3,"sources":["components-to-test-in-isolation/component-using-formik.js","App.js","reportWebVitals.js","index.js"],"names":["CommentForm","onSubmit","sleep","ms","Promise","r","setTimeout","useState","isDisabled","setBtnIsDisabled","handleSubmit","values","a","resetForm","setSubmitting","console","log","comment","initialValues","name","component","validate","value","className","placeholder","type","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAyDeA,EApDK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACfC,EAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAC,OAAIC,WAAWD,EAAGF,OACnD,EAAuCI,oBAAS,GAAhD,mBAAOC,EAAP,KAAmBC,EAAnB,KAYMC,EAAY,uCAAG,WAAOC,EAAP,kBAAAC,EAAA,2DAAiBC,UAAWC,EAA5B,EAA4BA,cAC/CC,QAAQC,IAAI,wBACQL,EAAZM,QAFW,gCAIXf,EAAM,KAJK,OAKjBD,EAASU,GALQ,OAOnBG,GAAc,GAPK,2CAAH,wDAUlB,OACE,cAAC,IAAD,CACEI,cAAe,CACbD,QAAS,IAEXhB,SAAUS,EAJZ,SAME,eAAC,IAAD,WACE,cAAC,IAAD,CACES,KAAK,UACLC,UAAU,WACVC,SAhCS,SAACC,GAEZA,GACFP,QAAQC,IAAI,mBACZP,GAAiB,IAEjBA,GAAiB,IA2Bbc,UAAU,sEACVC,YAAY,qBAEd,wBACEC,KAAK,SAELF,UAAU,kEACVG,SAAUlB,EAJZ,wBCjCOmB,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e7424858.chunk.js","sourcesContent":["import React, { useState } from 'react';\n//import classNames from 'classnames';\nimport { Formik, Field, Form } from 'formik';\n//import './attempt_report_comment_form.scss';\n\nconst CommentForm = ({ onSubmit }) => {\n  const sleep = ms => new Promise(r => setTimeout(r, ms));\n  const [isDisabled, setBtnIsDisabled] = useState(true);\n  const validate = (value) => {\n    let error;\n    if (value) {\n      console.log('inside validate');\n      setBtnIsDisabled(false);\n    } else {\n      setBtnIsDisabled(true);\n    }\n    return error;\n  };\n\n  const handleSubmit = async (values, { resetForm, setSubmitting }) => {\n    console.log('inside handleSubmit');\n    const { comment } = values;\n    if (comment) {\n      await sleep(500)\n      onSubmit(values)\n    }\n    setSubmitting(false);\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        comment: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Field\n          name=\"comment\"\n          component=\"textarea\"\n          validate={validate}\n          className=\"attempt-comment-form-textarea test-id-attempt-comment-form-textarea\"\n          placeholder=\"Add comment here\"\n        />\n        <button\n          type=\"submit\"\n          // The default state of the button is disabled, i.e not clickable and CTA on click\n          className=\"attempt-comment-form-submit test-id-attempt-comment-form-submit\"\n          disabled={isDisabled}\n        >\n          Post\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default CommentForm;\n","import './App.css';\nimport Form from './components-to-test-in-isolation/component-using-formik.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}